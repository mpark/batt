#!/usr/bin/python

import functools
import os.path
import subprocess

import SCons.Scanner.C

# Import variables.
Import(['env', 'src'])

# Our scanner.
scanner = SCons.Scanner.C.CScanner()

# Current working directory.
cwd = Dir(Dir(GetLaunchDir()).get_path(src))

# Set of supported extensions.
exts = {env[suffix] for suffix in {'PROGSUFFIX',
                                   'LIBSUFFIX',
                                   'SHLIBSUFFIX',
                                   'OBJSUFFIX',
                                   'SHOBJSUFFIX',
                                   'TESTSUFFIX',
                                   'PDFSUFFIX'}}

# Recursively find all of the object files that main depends on.
def get_dep_sources(main):
  def impl(sources, out):
    if not sources:
      return out
    out |= sources
    dep_sources = set()
    for source in sources:
      for dep_header in source.get_implicit_deps(env, scanner, (src,)):
        dep_source = File(os.path.splitext(dep_header.get_path(src))[0] + '.cc')
        if dep_source.srcnode().exists() and dep_source not in out:
          dep_sources.add(dep_source)
    return impl(dep_sources, out)
  return [source for source in impl({main}, set())]

# Execute the test and check that the return code is 0.
def run_test(target, source, env):
  for test in source:
    subprocess.check_call(test.get_path())

# For each given target path, try to build it.
for target_path in BUILD_TARGETS:
  target = cwd.File(target_path)
  root, ext = os.path.splitext(target_path)
  # Validate that the file kind is supported.
  if ext not in exts:
    raise ValueError(
        'Invalid extension: "{ext}" (choose from {exts})'.format(
          ext=ext,
          exts=', '.join(['"{ext}"'.format(ext=ext) for ext in exts])))
  # Get the corresponding source files.
  source = {env['PROGSUFFIX'] : lambda: get_dep_sources(cwd.File(root + '.cc')),
            env['LIBSUFFIX']  : lambda: cwd.File(root + '.cc'),
            env['SHLIBSUFFIX']: lambda: cwd.File(root + '.cc'),
            env['OBJSUFFIX']  : lambda: cwd.File(root + '.cc'),
            env['SHOBJSUFFIX']: lambda: cwd.File(root + '.cc'),
            env['PDFSUFFIX']  : lambda: cwd.File(root + '.latex'),
            env['TESTSUFFIX'] : lambda: get_dep_sources(cwd.File(root + '.test.cc'))
            }[ext]()
  boost = ['boost_filesystem', 'boost_regex', 'boost_system']
  gtest = ['gtest', 'gtest_main', 'pthread']
  # Choose the correct builder based on the target_path's extension.
  {env['PROGSUFFIX'] : functools.partial(env.Program, LIBS=boost),
   env['LIBSUFFIX']  : env.Library,
   env['SHLIBSUFFIX']: env.SharedLibrary,
   env['OBJSUFFIX']  : env.Object,
   env['SHOBJSUFFIX']: env.SharedObject,
   env['PDFSUFFIX']  : env.PDF,
   env['TESTSUFFIX'] : functools.partial(env.Program, LIBS=boost+gtest)
  }[ext](target, source)
  # If target is a unit test, execute it.
  test = None
  if GetOption('test') and ext == env['TESTSUFFIX']:
    test = env.Command(
               None,
               target,
               Action(run_test, 'Running test: $SOURCE'))
  env.Alias(target_path, [target, test])

