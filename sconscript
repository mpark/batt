#!/usr/bin/python

import functools
import os.path
import SCons.Scanner.C

# Import variables.
Import(['env', 'src'])

# Our scanner.
scanner = SCons.Scanner.C.CScanner()

# Current working directory.
cwd = Dir(Dir(GetLaunchDir()).get_path(src))

# Recursively find all of the source files that main depends on.
def get_dep_sources(main):
  def impl(sources, out):
    if not sources:
      return out
    out |= sources
    dep_sources = set()
    for source in sources:
      for dep_header in source.get_implicit_deps(env, scanner, (src,)):
        dep_source = File(os.path.splitext(dep_header.get_path(src))[0] + '.cc')
        if dep_source.srcnode().exists() and dep_source not in out:
          dep_sources.add(dep_source)
    return impl(dep_sources, out)
  return list(impl({main}, set()))

# List of valid extensions to try to build.
exts = [env[suffix] for suffix in ['PROGSUFFIX',
                                   'LIBSUFFIX',
                                   'SHLIBSUFFIX',
                                   'OBJSUFFIX',
                                   'SHOBJSUFFIX',
                                   'TESTSUFFIX']]

for target in BUILD_TARGETS:
  root, ext = os.path.splitext(target)  # Split root and ext of target.
  if ext not in exts:
    raise ValueError(
        "Invalid extension: '{ext}' (choose from {exts})".format(
          ext=ext,
          exts=', '.join(["'{ext}'".format(ext=ext) for ext in exts])))
  main = cwd.File((target if ext == env['TESTSUFFIX'] else root) + '.cc')
  sources = get_dep_sources(main)
  # Choose the correct builder based on the target's extension.
  node = {env['PROGSUFFIX'] : env.Program,
          env['LIBSUFFIX']  : env.StaticLibrary,
          env['SHLIBSUFFIX']: env.SharedLibrary,
          env['OBJSUFFIX']  : env.StaticObject,
          env['SHOBJSUFFIX']: env.SharedObject,
          env['TESTSUFFIX'] : functools.partial(
                                env.Program,
                                LIBS=['gtest', 'gtest_main', 'pthread'])
         }[ext](cwd.File(target), sources)
  env.Alias(target, node)

